@interface = vfsman
@server = "org.anillo.vfsman"
@realm = global

structure vfsman_path_info {
	size: u64
	type: u8
	_reserved0: u8
	_reserved1: u16
	_reserved2: u32
}

interface vfsman_listing {
	function next(max_entries: in u64, max_buffer_size: in u64, buffer: out data, entry_count: out u64, min_buffer_size: out u64, status: out i32)
	function next_shared(max_entries: in u64, max_buffer_size: in u64, shared_buffer: in data, buffer_offset: in u64, entry_count: out u64, used_buffer_size: out u64, min_buffer_size: out u64, status: out i32)
}

interface vfsman_node {
	# common functions
	function get_path(path: out data, status: out i32)
	function duplicate_raw(channel: out channel, status: out i32)
	function get_info(info: out vfsman_path_info, status: out i32)

	# file functions
	function read(offset: in u64, size: in u64, buffer: out data, status: out i32)
	function read_shared(offset: in u64, size: in u64, shared_buffer: in data, buffer_offset: in u64, read_count: out u64, status: out i32)
	function write(offset: in u64, buffer: in data, written_count: out u64, status: out i32)

	# directory functions
	function list(listing: out vfsman_listing, status: out i32)
}

interface vfsman {
	function open(path: in data, node: out vfsman_node, status: out i32)
	function list_path(path: in data, listing: out vfsman_listing, status: out i32)
	function get_path_info(path: in data, info: out vfsman_path_info, status: out i32)
}
